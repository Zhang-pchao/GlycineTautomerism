#!/usr/bin/env python
# coding: utf-8


import numpy as np
import os, sys
import glob
import shutil
import shutil
import random


def get_POSCAR(lines, poscar, name, length, lattice,
               keyword, atomlist, upfpath, orbpath, drppath, upflist, orblist, descriptor):
    write_poscar = open(poscar, 'w')
    write_poscar.write("ATOMIC_SPECIES" + '\n')
    for i in range(len(atomlist)):
        write_poscar.write('%s 1.00 %s\n' %(atomlist[i],os.path.join(upfpath,upflist[i])))
    write_poscar.write('\n\n')
    write_poscar.write('LATTICE_CONSTANT\n')
    write_poscar.write('%s\n\n' %lattice)
    write_poscar.write('LATTICE_VECTORS\n')
    write_poscar.write(length + ' ' + '0.0' + ' ' + '0.0' + '\n')
    write_poscar.write('0.0' + ' ' + length + ' ' + '0.0' + '\n')
    write_poscar.write('0.0' + ' ' + '0.0' + ' ' + length + '\n\n')
    write_poscar.write('ATOMIC_POSITIONS\n')
    write_poscar.write('%s\n\n' %keyword)

    atomdict = {}
    for k in range(len(atomlist)): 
        atom_index = 0
        for i in range(len(lines)):   
            line_split = lines[i].split()
            if line_split[0] == atomlist[k]:
                atom_index += 1
        atomdict[atomlist[k]] = atom_index  
    
    for k in range(len(atomlist)): 
        write_poscar.write('%s\n' %atomlist[k])
        write_poscar.write('0.0\n')
        write_poscar.write('%d\n' %atomdict[atomlist[k]])
        for i in range(len(lines)):   
            line_split = lines[i].split()
            if line_split[0] == atomlist[k]:
                write_poscar.write(line_split[1]+' '+line_split[2]+' '+line_split[3]+' 0 0 0\n')
   
    write_poscar.write('\nNUMERICAL_ORBITAL\n')
    for i in range(len(atomlist)):
        write_poscar.write('%s\n' %os.path.join(orbpath,orblist[i]))
    write_poscar.write('\nNUMERICAL_DESCRIPTOR\n') 
    write_poscar.write('%s\n' %os.path.join(drppath,descriptor))
    write_poscar.close()

def mkdir(path):
    path=path.strip()
    path=path.rstrip("\\")
    isExists=os.path.exists(path)
    if not isExists:
        os.makedirs(path) 

if __name__ == '__main__':

    poscar_path = "/data/HOME_BACKUP/pengchao/glycine/deepks/glycine/pbe_2/test/001"
    xyz = "/data/HOME_BACKUP/pengchao/glycine/cp2k/OPES_EXP/Glycine53H2O_OH_NH3CH2COOH/ProtonCV_12"
    xyzfile = os.path.join(xyz,"xyz.dat.1001")
    searchfile = open(xyzfile, "r")
    lines = searchfile.readlines()
    searchfile.close() 
        
    atoms = int(lines[0].split()[0])
    s_index = 0
    s_list = []
    for line in lines:
        s_index += 1
        if 'generated by VMD' in line:
            s_list.append(s_index)
        
    length   = '12.028'
    lattice  = '1.8897259886' #angstrom2bohr
    keyword  = 'Cartesian'
    atomlist = ['H','O','N','C']
    upfpath  = '/data/HOME_BACKUP/pengchao/glycine/deepks/glycine/pbe_2/iter'
    orbpath  = '/data/HOME_BACKUP/pengchao/glycine/deepks/glycine/pbe_2/iter'
    drppath  = '/data/HOME_BACKUP/pengchao/glycine/deepks/glycine/pbe_2/iter'
    upflist  =['H_ONCV_PBE-1.0.upf',
            'O_ONCV_PBE-1.0.upf',
            'N_ONCV_PBE-1.0.upf',
            'C_ONCV_PBE-1.0.upf']
    orblist  =['H_gga_6au_100Ry_2s1p.orb',
            'O_gga_7au_100Ry_2s2p1d.orb',
            'N_gga_7au_100Ry_2s2p1d.orb',
            'C_gga_7au_100Ry_2s2p1d.orb']
    descriptor = 'jle.orb'
    
    j = 1
    for i in range(401,len(s_list),5):
    #for i in range(0,3): 
        name = str(10000+j)
        j += 1
        mkpath = os.path.join(poscar_path, name)
        mkdir(mkpath)
        poscar = os.path.join(mkpath, 'STRU') 
        get_POSCAR(lines[s_list[i]:s_list[i]+atoms], poscar, name, length, lattice,
                keyword, atomlist, upfpath, orbpath, drppath, upflist, orblist, descriptor)     